<?php
/**
 * Copyright Â©  All rights reserved.
 * See COPYING.txt for license details.
 */
declare(strict_types=1);

namespace Maxsel\OrderImport\Controller\Adminhtml\Index;

use Magento\Framework\App\Action\HttpPostActionInterface;
use Magento\Framework\App\Response\Http;
use Magento\Framework\App\Request\Http as RequestHttp;
use Magento\Framework\Controller\ResultInterface;
use Magento\Framework\Exception\LocalizedException;
use Magento\Framework\Serialize\Serializer\Json;
use Magento\Framework\View\Result\PageFactory;
use Psr\Log\LoggerInterface;
use Magento\Framework\File\Csv;
use Magento\Framework\App\RequestInterface;
use Maxsel\OrderImport\Model\Process;

class Import implements HttpPostActionInterface
{

    /**
     * @var PageFactory
     */
    protected $resultPageFactory;
    /**
     * @var Json
     */
    protected $serializer;
    /**
     * @var LoggerInterface
     */
    protected $logger;
    /**
     * @var Http
     */
    protected $http;

    protected $csv;

    protected $request;
    protected $requestHttp;
    protected $process;

    /**
     * Constructor
     *
     * @param PageFactory $resultPageFactory
     * @param Json $json
     * @param LoggerInterface $logger
     * @param Http $http
     */
    public function __construct(
        PageFactory $resultPageFactory,
        Json $json,
        LoggerInterface $logger,
        Csv $csv,
        RequestInterface $request,
        RequestHttp $requestHttp,
        Http $http,
        Process $process
    ) {
        $this->resultPageFactory = $resultPageFactory;
        $this->serializer = $json;
        $this->logger = $logger;
        $this->http = $http;
        $this->request = $request;
        $this->requestHttp = $requestHttp;
        $this->csv = $csv;
        $this->process = $process;
    }

    /**
     * Execute view action
     *
     * @return ResultInterface
     */
    public function execute()
    {
        try {

            $file = $this->requestHttp->getFiles('import_csv_file');

            $data = $this->import($file);
            return $this->jsonResponse(print_r($data, true));
        } catch (LocalizedException $e) {
            return $this->jsonResponse($e->getMessage());
        } catch (\Exception $e) {
            $this->logger->critical($e);
            return $this->jsonResponse($e->getMessage());
        }
    }

    /**
     * Create json response
     *
     * @return ResultInterface
     */
    public function jsonResponse($response = '')
    {
        $this->http->getHeaders()->clearHeaders();
        $this->http->setHeader('Content-Type', 'application/json');
        return $this->http->setBody(
            $this->serializer->serialize($response)
        );
    }
    public function import($file)
    {
        $fileData = [];
        if (!isset($file['tmp_name']))
            throw new \Magento\Framework\Exception\LocalizedException(__('Invalid file upload attempt.'));

        $csvData = $this->csv->getData($file['tmp_name']);
        $sortOrder = [];
        unset($csvData[0]);
        foreach ($csvData as $data) {
            $sortOrder[$data[0]][] = $data;
        }
        foreach ($sortOrder as $order) {
                $this->process->orderProcess($order);
        }
        return $fileData;
    }
}




