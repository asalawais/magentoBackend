<?php
/**
 * @package  BigBridge\ProductImport
 * @license See LICENSE.txt for license details.
 */

namespace BigBridge\ProductImport\Cron;

//use BigBridge\ProductImport\System\ConfigInterface;
use http\Exception;
use Magento\Catalog\Api\ProductRepositoryInterface;
use Magento\Catalog\Model\Product\Attribute\Source\Status;
use Magento\Catalog\Model\ProductRepositoryFactory;
use Magento\ConfigurableProduct\Model\Product\Type\Configurable;
use Magento\Framework\Api\SearchCriteriaBuilder;
use Magento\Framework\Api\SearchCriteriaBuilderFactory;
use Magento\Framework\Exception\CouldNotSaveException;
use Magento\Framework\Exception\InputException;
use Magento\Framework\Exception\StateException;
use Magento\Store\Model\StoreManagerInterface;
use BigBridge\ProductImport\Helper\CurlFetch;
use Magento\Framework\App\Filesystem\DirectoryList;
use Magento\Framework\Filesystem;
use Magento\Framework\Filesystem\Directory\WriteInterface;
use Magento\Catalog\Model\Product\Gallery\ReadHandler;
use Magento\Catalog\Model\Product\Gallery\Processor;
use Magento\Catalog\Model\ResourceModel\Product\Gallery;
use BigBridge\ProductImport\Cron\GalleryImporterXml;


/**
 * Class ProductPublisher
 */
class GalleryImporter //implements CronJobInterface
{
    /**
     * @var StoreManagerInterface
     */
    private $storeManager;

    /**
     * @var SearchCriteriaBuilderFactory
     */
    private $criteriaBuilderFactory;

    /**
     * @var ProductRepositoryFactory
     */
    private $repositoryFactory;

    /**
     * @var ProductsArray
     */
    private $productsArray;

    /**
     * @var ConfigInterface
     */
    private $config;

    private $directoryList;

    protected $_filesystem;

    protected $_productCollectionFactory;

    protected $mediaDirectory;

    protected $galleryReadHandler;
    protected $imageProcessor;
    protected $productGallery;
    protected $galleryImporterXml;

    /**
     * ProductPublisher constructor.
     *
     * @param SearchCriteriaBuilderFactory $criteriaBuilderFactory
     * @param ProductRepositoryFactory $repositoryFactory
     * @param ProductsArray $productsArray
     * @param StoreManagerInterface $storeManager
     * @param ConfigInterface $config
     */
    public function __construct(
        SearchCriteriaBuilderFactory $criteriaBuilderFactory,
        ProductRepositoryFactory $repositoryFactory,
        StoreManagerInterface $storeManager,
        \Magento\Framework\Module\Dir\Reader $moduleReader,
        \Magento\Framework\App\Filesystem\DirectoryList $directoryList,
        \Magento\Framework\Filesystem $filesystem,
        ReadHandler $galleryReadHandler,
        Processor  $imageProcessor,
        Gallery $productGallery,
        GalleryImporterXml $galleryImporterXml,
        \Magento\Catalog\Model\ResourceModel\Product\CollectionFactory $productCollectionFactory

    ) {
        $this->storeManager = $storeManager;
        $this->criteriaBuilderFactory = $criteriaBuilderFactory;
        $this->repositoryFactory = $repositoryFactory;
        $this->directoryList = $directoryList;
        $this->_filesystem = $filesystem;
        $this->mediaDirectory = $this->_filesystem->getDirectoryRead(DirectoryList::MEDIA);
        $this->_productCollectionFactory = $productCollectionFactory;
        $this->galleryReadHandler = $galleryReadHandler;
        $this->imageProcessor = $imageProcessor;
        $this->productGallery = $productGallery;
        $this->galleryImporterXml = $galleryImporterXml;
        //$this->config = $config;
    }

    /**
     * Publish products
     *
     * @return bool
     */
    public function execute()
    {
        $this->createXMLProducts();
        $this->galleryImporterXml->execute();
        return true;
        //print_r($productXML);
        //if($productXML!=''){
        //	$this->writeXML($productXML);
        //}

    }

    /**
     * @throws CouldNotSaveException
     * @throws InputException
     * @throws StateException
     *
     * @return void
     */
    private function createXMLProducts()
    {
        $content = '';
        try {
        $var = $this->_filesystem->getDirectoryRead(DirectoryList::VAR_DIR)->getAbsolutePath();
        $productCollection  = $this->getProductCollection();
        $img = $this->mediaDirectory->getAbsolutePath() . 'afas'.DS.'import' . DS;
        foreach ($productCollection as $product){
                $this->resetImageGallery($product);
                 $mainImage = $img.$product->getSku().'.jpg';
            if ($this->mediaDirectory->isFile($mainImage)) {
                $content .= $this->setSimpleImages($product->getSku(), $mainImage);
            }
        }

        foreach ($this->getGroupedProductCollection() as $conf){
            $this->resetImageGallery($conf);
            if (strpos($conf->getSku(), 'conf_') !== false) {
                $mainImage = $img . substr($conf->getSku(), 5) . '.jpg';
                if ($this->mediaDirectory->isFile($mainImage)) {
                    $content .= $this->setConfigImages($conf->getSku(), $mainImage);
                }
            }
        }

        $fileName = $var. 'import'.DS.'afas_images'.'.xml';
        $myfile = fopen($fileName, "w") or die("Unable to open file!");
        $importXML = '<?xml version="1.0" encoding="UTF-8"?>
                       <import>'.$content.'</import>';
        fwrite($myfile, $importXML);
        fclose($myfile);
        } catch (Exception $e) {

        }
    }

    private function setSimpleImages($sku, $img){
        $xml = '<simple sku="'.$sku.'">
             <attribute_set_name>Default</attribute_set_name>
              <images>
                <image file_or_url="'.$img.'">
                    <global>
                        <role>image</role>
                        <role>small_image</role>
                        <role>thumbnail</role>
                        <gallery_information label="Home Shopping 24" position="1" enabled="1" />
                    </global>
                </image>'
            . $this->getChildImages($sku)
            .
            '</images>
        </simple>';
        return $xml;
    }
    private function setConfigImages($sku, $img){
        $xml = '<configurable sku="'.$sku.'">
             <attribute_set_name>Default</attribute_set_name>
              <images>
                <image file_or_url="'.$img.'">
                    <global>
                        <role>image</role>
                        <role>small_image</role>
                        <role>thumbnail</role>
                        <gallery_information label="Home Shopping 24" position="1" enabled="1" />
                    </global>
                </image>'
            . $this->getChildImages(substr($sku,5))
            .
            '</images>
        </configurable>';
        return $xml;
    }

    private function getChildImages($sku){
        $xml = '';
        $mediaPath = $this->mediaDirectory->getAbsolutePath() . 'afas'. DS .'import' . DS;
        $image = $mediaPath.$sku;
        for($i=0;$i<=7; $i++) {
            if ($this->mediaDirectory->isFile($image . '_0' . $i . '.jpg')) {
                $xml .= '<image file_or_url="' . $image . '_0' . $i . '.jpg">
                <global>
                    <gallery_information label="Home Shopping 24" position="1" enabled="1" />
                </global>
            </image>';
            }
        }
        return $xml;
    }
    public function getProductCollection()
    {
        /** @var $collection \Magento\Catalog\Model\ResourceModel\Product\Collection */
        $collection = $this->_productCollectionFactory->create();
        $collection->addAttributeToSelect('sku');
        $collection->addAttributeToFilter('type_id', \Magento\Catalog\Model\Product\Type::TYPE_SIMPLE);
        //$collection->setPageSize(3);
        return $collection;
    }
    public function getGroupedProductCollection()
    {
        /** @var $collection \Magento\Catalog\Model\ResourceModel\Product\Collection */
        $collection = $this->_productCollectionFactory->create();
        $collection->addAttributeToSelect('sku');
        $collection->addAttributeToFilter('type_id', array('eq' => 'configurable'));
        return $collection;
    }

    public function resetImageGallery($product)
    {
        try {
            $repository = $this->repositoryFactory->create();
            $product = $repository->get($product->getSku());
            if ($product) {
                $this->galleryReadHandler->execute($product);

                // Unset existing images
                $images = $product->getMediaGalleryImages();
                foreach ($images as $child) {
                    $this->productGallery->deleteGallery($child->getValueId());
                    $this->imageProcessor->removeImage($product, $child->getFile());
                }

            }
        } catch (\Exception $e){

        }

    }


}
